/************************linux***********************************/
ps aux | grep tomcat 查看进程
sudo kill -9 24289 杀死进程
grep -C 5 'NullPointerException' ./catalina.out 
sed -n '266299,266399p' ./catalina.out    这样你就可以只查看文件的第5行到第10行
grep -n 'NullPointerException' ./catalina.out   显示行号以及所在行
grep apple fruitlist.txt | grep -v pineapple   排除
grep -nlr  'name'  . 意思是在当前目录递归搜索“name”，并在结果里显示行号。
netstat -an | grep 8788   查看端口占用
rcho >> klllf.log   日志重定向
webbench -c 并发数 -t 并发时间 网址
webbench -c 300 -t 10 http://wx.itzls.com/index.php/home/Redis1/order
find . -type f -name "*.swp" -delete  移除满足条件的所有文件：
find . -type f -mtime +10 -name "*.txt" -exec cp {} OLD \;
du -sh *  查看当前文件夹下所有文件大小
find -name '*.sh' | xargs grep 'sh' --color  将上一个命令得到的文件路径作为下一个文本搜索条件
grep 'dubbo.consumer.cluster' ./dubbo.properties | sed '2,$d' | cut -d'=' -f2   提取键值对格式文件指定值

 script -t 2> timing.log -a output.session  录制命令  exit退出
 scriptreplay timing.log output.session   播放命令
 
 curl http//www.baidu.com   查询接口是否通
 
 curl -s http://www.jxufe.cn/ | egrep -o "<img[^>]*src=\"[^>]+\"[^>]*>" | sed "s/<img[^>]*src=\"\([^ ]\+\)\"[^>]*>$/\1/g" | sort | uniq | xargs -n1 -I {} curl -s -O http://www.jxufe.cn/{}   爬取指定网站页面图片
 
 curl -H "Content-Type:application/json" -X POST -d 'json data' UR
 
 linux有设置对外端口访问范围，导致redis的telnet不通的问题。显示范围内的端口号都只能本地访问，6379自然也就不能被访问到了：
 使用：iptables -F，将这些规则都清楚掉，再次使用 iptables -L -n
 
 sed -i 's/foo/bar/g' myfile   修改文件内容 -i表示替换
 
 1) 创建swap，设置为8G
dd if=/dev/zero of=/home/swap bs=1024 count=8192000
2) 设置交换文件
mkswap /home/swap
3) 立即启用交换分区文件
swapon /home/swap
4) 编辑/etc/fstab文件，永久确定交换分区
vim /etc/fstab
添加以下语句。
/home/swap swap swap defaults 0 0
――――――――――――――――
版权声明：本文为CSDN博主「杯底囚人」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/beidiqiuren/java/article/details/52931399
/******************************git***************************************/
git tag
git push --tag
$ git tag -d ola_v1.0_b14
$ git push origin --delete tag ola_v1.0_b14
git checkout -b my-test  //在当前分支下创建my-test的本地分支分支
git push origin my-test  //将my-test分支推送到远程
git branch --set-upstream-to=origin/my-test //将本地分支my-test关联到远程分支my-test上   
git branch -a //查看远程分支 
git merge test；  合并分支
git reset --hard versionId 本地回退
git push -f  将本地回退强制推到远程
git branch -m old new   本地分支重命名
git branch -d <BranchName>
git push origin --delete Chapater6  删除远程分支


git update-index --assume-unchanged FILE 在FILE处输入要忽略的文件。
如果要还原的话，使用命令：
git update-index --no-assume-unchanged FILE

git config --global credential.helper store   只需首次输入密码，后面不需要输入
/******************************git***************************************/



/*********************************mysql***********************************/
DELIMITER |
create trigger tri_after_insert_code_unit_str after insert
on code_unit_str for each row
begin  
  declare sIndex int;
  declare eIndex int;
  declare strIds text;
  declare strId char(32);
	declare selCount int;

	set strIds = new.str_ids;
  set sIndex = 1;
	set eIndex = LOCATE(',',new.str_ids,sIndex);

/*循环开始*/
flag_while:while eIndex != 0  do
   set strId = SUBSTRING(strIds,sIndex,eIndex - sIndex);
	 set selCount = (select count(*) from str s where s.code_unit_id=new.code_unit_id and s.str_id=strId);

	 if selCount = 0 then
			insert into str(code_unit_id,str_id) values(NEW.code_unit_id,strId);
	 end if;
   set sIndex = eIndex + 1;
	 set eIndex = LOCATE(',',NEW.str_ids,sIndex);

   /*声明结束的时候*/
   if eIndex=0 then leave flag_while ; end if ;
 end while flag_while;  /*循环结束*/
end|
DELIMITER ;

SELECT * FROM information_schema.INNODB_TRX where trx_state <> 'RUNNING'   查看被锁记录
/**************************************************************************************/

  Pattern p = Pattern.compile("\\s*//[^/]+$");
  
  
/***************************************mongodb*******************************************/
monggoShell还一个javascript引擎
show dbs   展示数据库
user db;   使用数据库
show collections;    查看表
db.[documentName].insert({name:"xzx"}) 插入单个
db.[documentName].drop()    //清除表
db.[documentName].remove({})  //条件删除 

insert 插入相同id会报错，save相同id是更新，不同是插入
